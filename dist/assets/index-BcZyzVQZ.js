import{initializeApp as p}from"https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js";import{getFirestore as f,addDoc as g,collection as l,serverTimestamp as y,updateDoc as v,doc as c,deleteDoc as x,onSnapshot as h,query as u,orderBy as m,getDocs as w}from"https://www.gstatic.com/firebasejs/12.1.0/firebase-firestore.js";(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const s of t.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function r(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function n(e){if(e.ep)return;e.ep=!0;const t=r(e);fetch(e.href,t)}})();const k={apiKey:"AIzaSyAg-SOTza5s7RPXTARsUa1DqU0UTG1MVOg",authDomain:"todo-app-f0b27.firebaseapp.com",projectId:"todo-app-f0b27",storageBucket:"todo-app-f0b27.firebasestorage.app",messagingSenderId:"193322568260",appId:"1:193322568260:web:12356785e93cf222f18a11",measurementId:"G-CG33WLLSMJ"},b=p(k),d=f(b);Notification.requestPermission();window.addTask=async function(){const o=document.getElementById("taskTitle").value,r=document.getElementById("taskDescription").value,n=document.getElementById("taskDeliverable").value,e=document.getElementById("taskPriority").value,t=document.getElementById("taskCategory").value,s=document.getElementById("taskDueDate").value;if(!o||!s){alert("Title and Due Date are required!");return}try{await g(l(d,"tasks"),{title:o,description:r,deliverable:n,priority:e,category:t,dueDate:s,status:"Not Started",createdAt:y()}),document.getElementById("taskTitle").value="",document.getElementById("taskDescription").value="",document.getElementById("taskDeliverable").value="",document.getElementById("taskDueDate").value="",T(s,o)}catch(i){console.error("Error adding task:",i),alert("Failed to add task. Check console for details.")}};function T(a,o){const r=luxon.DateTime,n=r.fromISO(a),e=r.now(),t=n.diff(e,"milliseconds").milliseconds;t>0&&setTimeout(()=>{new Notification(`Reminder: ${o}`,{body:`Task "${o}" is due soon!`})},t-6e4)}function D(a){switch(a){case"High":return'<span class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full bg-red-100 text-red-800">High</span>';case"Medium":return'<span class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full bg-yellow-100 text-yellow-800">Medium</span>';case"Low":return'<span class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full bg-green-100 text-green-800">Low</span>';default:return""}}async function I(){const a=document.getElementById("taskList");a.innerHTML="";let o=0,r=0;try{const n=u(l(d,"tasks"),m("createdAt","desc")),e=await w(n);e.empty&&(a.innerHTML='<p class="text-slate-500 text-center py-4">No tasks yet. Add one above to get started!</p>'),e.forEach(t=>{const s=t.data();o++,s.status==="Completed"&&r++;const i=document.createElement("div");i.className="p-4 border border-slate-200 rounded-lg transition-shadow hover:shadow-md",i.innerHTML=`
              <div class="flex flex-col sm:flex-row justify-between sm:items-center">
                <div class="flex-grow">
                  <div class="flex items-center mb-2">
                    ${D(s.priority)}
                    <h3 class="font-bold text-lg text-slate-800">${s.title}</h3>
                  </div>
                  <p class="text-slate-600 text-sm mb-2">${s.description||"No description"}</p>
                  <div class="flex flex-wrap gap-x-4 gap-y-1 text-xs text-slate-500">
                      <p><strong>Deliverable:</strong> ${s.deliverable||"None"}</p>
                      <p><strong>Category:</strong> ${s.category}</p>
                      <p><strong>Due:</strong> ${luxon.DateTime.fromISO(s.dueDate).toLocaleString(luxon.DateTime.DATETIME_SHORT)}</p>
                  </div>
                </div>
                <div class="flex items-center space-x-2 mt-4 sm:mt-0">
                   <select onchange="updateStatus('${t.id}', this.value)" class="w-full sm:w-auto text-sm p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition">
                      <option value="Not Started" ${s.status==="Not Started"?"selected":""}>Not Started</option>
                      <option value="In Progress" ${s.status==="In Progress"?"selected":""}>In Progress</option>
                      <option value="Completed" ${s.status==="Completed"?"selected":""}>Completed</option>
                   </select>
                   <button onclick="deleteTask('${t.id}')" class="text-slate-500 hover:text-red-600 p-2 rounded-md transition-colors">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>
                   </button>
                </div>
              </div>
            `,a.appendChild(i)}),document.getElementById("totalTasks").textContent=o,document.getElementById("completedTasks").textContent=r,document.getElementById("completionRate").textContent=o?(r/o*100).toFixed(1)+"%":"0%"}catch(n){console.error("Error loading tasks:",n)}}window.updateStatus=async function(o,r){try{await v(c(d,"tasks",o),{status:r})}catch(n){console.error("Error updating status:",n)}};window.deleteTask=async function(o){if(confirm("Are you sure you want to delete this task?"))try{await x(c(d,"tasks",o))}catch(r){console.error("Error deleting task:",r)}};h(u(l(d,"tasks"),m("createdAt","desc")),a=>{I()});
