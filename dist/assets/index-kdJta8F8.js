import{initializeApp as g}from"https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js";import{getFirestore as f,addDoc as y,collection as c,serverTimestamp as v,updateDoc as x,doc as u,deleteDoc as k,onSnapshot as h,query as m,orderBy as p,getDocs as w}from"https://www.gstatic.com/firebasejs/12.1.0/firebase-firestore.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))a(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function o(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(e){if(e.ep)return;e.ep=!0;const s=o(e);fetch(e.href,s)}})();const b={apiKey:"AIzaSyAg-SOTza5s7RPXTARsUa1DqU0UTG1MVOg",authDomain:"todo-app-f0b27.firebaseapp.com",projectId:"todo-app-f0b27",storageBucket:"todo-app-f0b27.firebasestorage.app",messagingSenderId:"193322568260",appId:"1:193322568260:web:12356785e93cf222f18a11",measurementId:"G-CG33WLLSMJ"},T=g(b),l=f(T);Notification.requestPermission();window.addTask=async function(){const t=document.getElementById("taskTitle").value,o=document.getElementById("taskDescription").value,a=document.getElementById("taskDeliverable").value,e=document.getElementById("taskPriority").value,s=document.getElementById("taskCategory").value,i=document.getElementById("taskDueDate").value,r=document.getElementById("taskAssignedBy").value;if(!t||!i){alert("Title and Due Date are required!");return}try{await y(c(l,"tasks"),{title:t,description:o,deliverable:a,priority:e,category:s,dueDate:i,assignedBy:r,status:"Not Started",createdAt:v()}),document.getElementById("taskTitle").value="",document.getElementById("taskDescription").value="",document.getElementById("taskDeliverable").value="",document.getElementById("taskDueDate").value="",document.getElementById("taskAssignedBy").value="",I(i,t)}catch(d){console.error("Error adding task:",d),alert("Failed to add task. Check console for details.")}};function I(n,t){const o=luxon.DateTime,a=o.fromISO(n),e=o.now(),s=a.diff(e,"milliseconds").milliseconds;s>0&&setTimeout(()=>{new Notification(`Reminder: ${t}`,{body:`Task "${t}" is due soon!`})},s-6e4)}function B(n){switch(n){case"High":return'<span class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full bg-red-100 text-red-800">High</span>';case"Medium":return'<span class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full bg-yellow-100 text-yellow-800">Medium</span>';case"Low":return'<span class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full bg-green-100 text-green-800">Low</span>';default:return""}}async function D(){const n=document.getElementById("taskList");n.innerHTML="";let t=0,o=0,a=0;try{const e=m(c(l,"tasks"),p("createdAt","desc")),s=await w(e);s.empty&&(n.innerHTML='<p class="text-slate-500 text-center py-4">No tasks yet. Add one above to get started!</p>'),s.forEach(i=>{const r=i.data();t++,r.status==="Completed"&&o++,r.status==="In Progress"&&a++;const d=document.createElement("div");d.className="p-4 border border-slate-200 rounded-lg transition-shadow hover:shadow-md",d.innerHTML=`
                      <div class="flex flex-col sm:flex-row justify-between sm:items-center">
                        <div class="flex-grow">
                          <div class="flex items-center mb-2">
                            ${B(r.priority)}
                            <h3 class="font-bold text-lg text-slate-800">${r.title}</h3>
                          </div>
                          <p class="text-slate-600 text-sm mb-2">${r.description||"No description"}</p>
                          <div class="flex flex-wrap gap-x-4 gap-y-1 text-xs text-slate-500">
                              <p><strong>Deliverable:</strong> ${r.deliverable||"None"}</p>
                              <p><strong>Category:</strong> ${r.category}</p>
                              <p><strong>Assigned By:</strong> ${r.assignedBy||"N/A"}</p>
                              <p><strong>Due:</strong> ${luxon.DateTime.fromISO(r.dueDate).toLocaleString(luxon.DateTime.DATETIME_SHORT)}</p>
                          </div>
                        </div>
                        <div class="flex items-center space-x-2 mt-4 sm:mt-0">
                           <select onchange="updateStatus('${i.id}', this.value)" class="w-full sm:w-auto text-sm p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition">
                              <option value="Not Started" ${r.status==="Not Started"?"selected":""}>Not Started</option>
                              <option value="In Progress" ${r.status==="In Progress"?"selected":""}>In Progress</option>
                              <option value="Completed" ${r.status==="Completed"?"selected":""}>Completed</option>
                           </select>
                           <button onclick="deleteTask('${i.id}')" class="text-slate-500 hover:text-red-600 p-2 rounded-md transition-colors">
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>
                           </button>
                        </div>
                      </div>
                    `,n.appendChild(d)}),document.getElementById("totalTasks").textContent=t,document.getElementById("completedTasks").textContent=o,document.getElementById("inProgressTasks").textContent=a,document.getElementById("completionRate").textContent=t?(o/t*100).toFixed(1)+"%":"0%"}catch(e){console.error("Error loading tasks:",e)}}window.updateStatus=async function(t,o){try{await x(u(l,"tasks",t),{status:o})}catch(a){console.error("Error updating status:",a)}};window.deleteTask=async function(t){if(confirm("Are you sure you want to delete this task?"))try{await k(u(l,"tasks",t))}catch(o){console.error("Error deleting task:",o)}};h(m(c(l,"tasks"),p("createdAt","desc")),n=>{D()});
